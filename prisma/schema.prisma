// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model post {
    id          String            @id @default(cuid())
    post        String            @db.Text
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    name        String
    createdBy   User              @relation(fields: [createdById], references: [id])
    createdById String
    permissions post_permission[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String            @id @default(cuid())
    name          String
    email         String            @unique
    emailVerified DateTime?
    image         String
    role          String            @default("guest") //guest, member, staff, admin, gm
    accounts      Account[]
    sessions      Session[]
    posts         post[]
    eso           eso[]
    ffxiv         ffxiv[]
    swtor         swtor[]
    staff         staff[]
    permissions   user_permission[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Guild role tables

model eso {
    id       String   @id @default(cuid())
    userId   String   @unique //FK from user
    rank     String   @default("Member") //member, respected, officer, deputy
    raid     Boolean? @default(false)
    raidlead Boolean? @default(false)
    mentor   Boolean? @default(false)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ffxiv {
    id       String   @id @default(cuid())
    userId   String   @unique
    rank     String   @default("Member")
    raid     Boolean? @default(false)
    raidlead Boolean? @default(false)
    mentor   Boolean? @default(false)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model swtor {
    id       String   @id @default(cuid())
    userId   String   @unique
    rank     String   @default("Member")
    raid     Boolean? @default(false)
    raidlead Boolean? @default(false)
    mentor   Boolean? @default(false)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model staff {
    id             String   @id @default(cuid())
    userId         String   @unique
    specialist     String? //List roles, separate by semicolon?
    representative String? //List roles, separate by semicolon?
    highcouncil    Boolean? @default(false)
    guildmaster    Boolean? @default(false)
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model post_permission {
    id        String  @id @default(cuid())
    postId    String
    general   Boolean @default(false)
    eso       Boolean @default(false)
    ffxiv     Boolean @default(false)
    swtor     Boolean @default(false)
    published Boolean @default(false)
    post      post    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model user_permission {
    id      String  @id @default(cuid())
    userId  String
    staff   Boolean @default(false)
    member  Boolean @default(false)
    council Boolean @default(false)
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
