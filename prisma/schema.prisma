// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
}

// Necessary for auth.js, don't change anything here!!!
model Account {
    id                String  @id @default(cuid())
    userId            String    @unique
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String              @id @default(cuid())
    name          String              @unique
    email         String              @unique
    emailVerified DateTime?
    image         String
    role          String              @default("guest") //guest, member, staff
    tgc_guild_member         Boolean             @default(false)
    accounts      Account[]
    sessions      Session[]
    posts         post[]
    eso           eso[]
    ffxiv         ffxiv[]
    swtor         swtor[]
    staff         staff[]
    post_mod      post_modification[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Post tables
model post {
    id          String              @id @default(cuid())
    post        String              @db.Text
    createdAt   DateTime            @default(now())
    updatedAt   DateTime            @updatedAt
    title       String
    createdBy   User                @relation(fields: [createdById], references: [id])
    createdById String
    permissions post_permission[]
    mod         post_modification[]
}

model post_permission {
    id        String  @id @default(cuid())
    postId    String    @unique //FK from post
    general   Boolean @default(false) //Game focus
    eso       Boolean @default(false)
    ffxiv     Boolean @default(false)
    swtor     Boolean @default(false)
    staff     Boolean @default(false) //Staff focus
    officer   Boolean @default(false)
    raid      Boolean @default(false) //Staff focused, but applicable to game
    published Boolean @default(false)
    guild_public Boolean @default(false)
    type      String                   //article, build, guide, raid, report, 
    post      post    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// Guild role tables
model eso {
    id       String   @id @default(cuid())
    userId   String   @unique //FK from user
    rank     String   @default("none") //member, respected, officer, deputy
    raid     Boolean? @default(false) //Members that are part of a raid team
    raidlead Boolean? @default(false) //Staff/Non-Staff position?, focused on raids
    mentor   Boolean? @default(false) //Staff position, mentor
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ffxiv {
    id       String   @id @default(cuid())
    userId   String   @unique
    rank     String   @default("none")
    raid     Boolean? @default(false)
    raidlead Boolean? @default(false)
    mentor   Boolean? @default(false)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model swtor {
    id       String   @id @default(cuid())
    userId   String   @unique
    rank     String   @default("none")
    raid     Boolean? @default(false)
    raidlead Boolean? @default(false)
    mentor   Boolean? @default(false)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Staff role table
model staff {
    id             String   @id @default(cuid())
    userId         String   @unique
    admin          Boolean? @default(false) //Developers SPECIFICALLY with website access
    specialist     Boolean? @default(false) //Kind of a catch-all for staff
    representative Boolean? @default(false)
    highcouncil    Boolean? @default(false) //Promote/demote ONLY by GM
    guildmaster    Boolean? @default(false) //All permissions, should not be modifyable by ANYONE else
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model post_modification {
    id        String @id @default(cuid())
    postRef   post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
    post      String @db.Text
    title     String
    published String
    modBy     User   @relation(fields: [modById], references: [id])
    modById   String
}
