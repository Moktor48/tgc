// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
}

// Necessary for auth.js, don't change anything here!!!
model Account {
    id                String  @id @default(cuid())
    userId            String    @unique
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String              @id @default(cuid())
    name          String              @unique
    email         String              @unique
    emailVerified DateTime?
    image         String
    role          String              @default("guest") //guest, member, staff
    tgc_guild_member Boolean          @default(false)
    accounts      Account[]
    sessions      Session[]
    posts         post[]
    eso           eso[]
    ffxiv         ffxiv[]
    swtor         swtor[]
    staff         staff[]
    post_mod      post_modification[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Post tables
model post {
    id          String              @id @default(cuid())
    post        String              @db.Text
    createdAt   DateTime            @default(now())
    updatedAt   DateTime            @updatedAt
    title       String
    createdBy   User                @relation(fields: [createdById], references: [id])
    createdById String
    permissions post_permission[]
    mod         post_modification[]
}

model post_permission {
    id        String  @id @default(cuid())
    postId    String    @unique //FK from post
    general   Boolean @default(false) //Game focus
    eso       Boolean @default(false)
    ffxiv     Boolean @default(false)
    swtor     Boolean @default(false)
    staff     Boolean @default(false) //Staff focus
    officer   Boolean @default(false)
    raid      Boolean @default(false) //Staff focused, but applicable to game
    published Boolean @default(false)
    guild_public Boolean @default(false)
    type      String                   //article, build, guide, raid, report, 
    post      post    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// Guild role tables
model eso {
    id       String   @id @default(cuid())
    userId   String   @unique //FK from user
    rank     String   @default("none") //member, respected, officer, deputy
    raid     Boolean? @default(false) //Members that are part of a raid team
    raidlead Boolean? @default(false) //Staff/Non-Staff position?, focused on raids
    mentor   Boolean? @default(false) //Staff position, mentor
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ffxiv {
    id       String   @id @default(cuid())
    userId   String   @unique
    rank     String   @default("none")
    raid     Boolean? @default(false)
    raidlead Boolean? @default(false)
    mentor   Boolean? @default(false)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model swtor {
    id       String   @id @default(cuid())
    userId   String   @unique
    rank     String   @default("none")
    raid     Boolean? @default(false)
    raidlead Boolean? @default(false)
    mentor   Boolean? @default(false)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Staff role table
model staff {
    id             String   @id @default(cuid())
    userId         String   @unique
    admin          Boolean? @default(false) //Developers SPECIFICALLY with website access
    specialist     Boolean? @default(false) //Kind of a catch-all for staff
    representative Boolean? @default(false)
    highcouncil    Boolean? @default(false) //Promote/demote ONLY by GM
    guildmaster    Boolean? @default(false) //All permissions, should not be modifyable by ANYONE else
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model post_modification {
    id        String @id @default(cuid())
    postRef   post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
    post      String @db.Text
    title     String
    published String
    modBy     User   @relation(fields: [modById], references: [id])
    modById   String
}

// TGC models
// BUILD(build_id, title, content, cover_image_path, gmember_id, game_type, summary, created_at)
model BUILD {

    title String
    content String
    cover_image_path String
    gmember_id Int
    game_type String
    summary String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    build_id Int @id
}

// BUILD_AUDIENCES(id, build_id, audience)
model BUILD_AUDIENCES {
    id Int @id @default(autoincrement())
    build_id Int
    audience String
}
// CHARACTERS(character_uid, gmember_id, char_name, class_name, fact_id, game_id, misc_info, trial_parse) 
model CHARACTERS {
    character_uid Int @id @default(autoincrement())
    gmember_id Int
    char_name String
    class_name String
    fact_id Int
    game_id Int
    misc_info String
    trial_parse String
}
// DISCORD_JOIN_LEAVE(action_uid, action, timestamp, gmember_id)
model DISCORD_JOIN_LEAVE {
    action_uid Int @id @default(autoincrement())
    action String
    timestamp DateTime
    gmember_id Int
}
// DISCORD_MESSAGE(message_uid, gmember_id, channel_id, content, timestamp)
model DISCORD_MESSAGE {
    message_uid Int @id @default(autoincrement())
    gmember_id Int
    channel_id String
    content String
    timestamp DateTime
}
// DISCORD_USER(gmember_id, disc_nickname, ingame_name, highest_rank_role) 
model DISCORD_USER {
    gmember_id Int @id
    disc_nickname String
    ingame_name String
    highest_rank_role String
}
// ESO_EVENT(event_uid, gmember_id, event_type, attendee_cnt, duration, revenue, start_stimestamp, notes)
model ESO_EVENT {
    event_uid Int @id @default(autoincrement())
    gmember_id Int
    event_type String
    attendee_cnt Int
    duration Int
    revenue Int
    start_timestamp DateTime
    notes String
}
// ESO_EVENT_UNIQUE(event_uid, attendee_num, gmember_id) 
model ESO_EVENT_UNIQUE {
    event_uid Int @id
    attendee_num Int
    gmember_id Int
}
// ESO_MESSAGE(eso_id, content, guild_id, timestamp, officer_chat) 
model ESO_MESSAGE {
    eso_id Int @id @default(autoincrement())
    content String
    guild_id Int
    timestamp DateTime
    officer_chat Boolean
}
// ESO_RAID(gmember_id, trial, difficulty, clears, wipes, duration, raid_uid)
model ESO_RAID {
    gmember_id Int @id
    trial String
    difficulty String
    clears Int
    wipes Int
    duration Int
    raid_uid Int
}
// ESO_RAID_UNIQUE(raid_uid, attendee_num, gmember_id) 
model ESO_RAID_UNIQUE {
    raid_uid Int @id
    attendee_num Int
    gmember_id Int
}
// ESO_USER(gmember_id, eso_id, tier_tank, tier_healer, tier_dps)
model ESO_USER {
    gmember_id Int @id
    eso_id Int
    tier_tank String
    tier_healer String
    tier_dps String
}
// FACTIONS(faction_id, faction_name, game_id)
model FACTIONS {
    faction_id Int @id @default(autoincrement())
    faction_name String
    game_id Int
}
// GAMES(game_id, game_name)
model GAMES {
    game_id Int @id @default(autoincrement())
    game_name String
}
// GUIDE(guide_id, title, content, gmember_id, created_at, cover_image_path, game_type, summary)
model GUIDE {
    guide_id Int @id @default(autoincrement())
    title String
    content String
    gmember_id Int
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    cover_image_path String
    game_type String
    summary String
}
// GUIDE_AUDIENCES(id, guide_id, audience)
model GUIDE_AUDIENCES {
    id Int @id @default(autoincrement())
    guide_id Int
    audience String
}
// GUILD_NAMES(guild_id, guild_name)
model GUILD_NAMES {
    guild_id Int @id @default(autoincrement())
    guild_name String
}
// RANK_ROLE_MAPPING(rank_role_id, rank_role)
model RANK_ROLE_MAPPING {
    rank_role_id Int @id @default(autoincrement())
    rank_role String
}
// SITUATION_DISCIPLINARY(action_uid, gmember_id, punish_type, probation_weeks, timestamp, report) 
model SITUATION_DISCIPLINARY {
    action_uid Int @id @default(autoincrement())
    gmember_id Int
    punish_type String
    probation_weeks Int
    timestamp DateTime
    report String
}

// SITUATION_REPORT(report_uid, action_uid, timestamp, gmember_id, content)
model SITUATION_REPORT {
    report_uid Int @id @default(autoincrement())
    action_uid Int
    timestamp DateTime
    gmember_id Int
    content String
}
// STAFF_ADMIN(task_uid, gmember_id, duty_type, timestamp, action_target)
model STAFF_ADMIN {
    task_uid Int @id @default(autoincrement())
    gmember_id Int
    duty_type String
    timestamp DateTime
    action_target String
}
// STAFF_DUTY(duty_uid, gmember_id, duty_type, timestamp, target, eso_target_user)
model STAFF_DUTY {
    duty_uid Int @id @default(autoincrement())
    gmember_id Int
    duty_type String
    timestamp DateTime
    target String
    eso_target_user Int
}
// STAFF_FF_SWTOR(task_uid, gmember_id, timetamp, duty_id)
model STAFF_FF_SWTOR {
    task_uid Int @id @default(autoincrement())
    gmember_id Int
    timestamp DateTime
    duty_id Int
}
// STAFF_POINT_CHART(task_id, task_name, point_value, task_description)
model STAFF_POINT_CHART {
    task_id Int @id @default(autoincrement())
    task_name String
    point_value Int
    task_description String
}
// STAFF_POINT_LOG(uid, gmember_id, cnt_points, timestamp)
model STAFF_POINT_LOG {
    uid Int @id @default(autoincrement())
    gmember_id Int
    cnt_points Int
    timestamp DateTime
}
// STAFF_STATUS_CHANGE(transaction_id, status_update, training_type, trainer_gmember_id, timestamp) 
model STAFF_STATUS_CHANGE {
    transaction_id Int @id @default(autoincrement())
    status_update String
    training_type String
    trainer_gmember_id Int
    timestamp DateTime
}
// VOICE_SESSIONS(voice_session_id, gmember_id, channel_id, start_time, end_time, duration)
model VOICE_SESSIONS {
    voice_session_id Int @id @default(autoincrement())
    gmember_id Int
    channel_id String
    start_time DateTime
    end_time DateTime
    duration Int
}